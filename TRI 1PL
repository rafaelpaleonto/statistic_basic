import numpy as np
import pandas as pd
from scipy.optimize import minimize

respostas = 'EBBCDBDAECDBBBECDEBEABBDABDBBCCECDDABCAEBDADD'
gabarito = 'CEDAEEDEECCEBADCCCABBABCAACDDDACDBEABDCDBEABD'

acertos = []
for i in range(1, len(respostas)):
    if respostas[i] == gabarito[i]:
        acertos.append(1)
    else:
        acertos.append(0)
acertos = np.array(acertos).reshape(1, -1)

def log_verossimilhanca(b, acertos):
  
    n_pessoas, n_itens = acertos.shape
       
    theta = np.linspace(-3, 3, 100)

    probabilidades = 1 / (1 + np.exp(-(theta[:, None] - b)))  

    verossimilhancas = np.zeros((n_pessoas, len(theta)))  
    for i in range(n_pessoas):
        
        p = probabilidades[:, acertos[i] == 1]  
        q = probabilidades[:, acertos[i] == 0] 
        verossimilhancas[i] = np.prod(p, axis=1) * np.prod(1 - q, axis=1)

    log_verossimilhancas = np.sum(np.log(verossimilhancas + 1e-10)) 
    return -log_verossimilhancas 


n_itens = acertos.shape[1]
b_inicial = np.zeros(n_itens)

# Otimização
resultado = minimize(log_verossimilhanca, b_inicial, args=(acertos,), method='Nelder-Mead')
b_estimado = resultado.x

print("Parâmetros de dificuldade estimados (b):")
for i, valor_b in enumerate(b_estimado):
    print(f"Item {i+1}: {valor_b:.4f}")


def log_verossimilhanca_theta(theta, b, acertos):
    probabilidades = 1 / (1 + np.exp(-(theta - b)))
    
    p = probabilidades[acertos == 1]  
    q = probabilidades[acertos == 0]  
    verossimilhanca = np.prod(p) * np.prod(1 - q)  

    valor_log_verossimilhanca = np.log(verossimilhanca + 1e-10)  
    return -valor_log_verossimilhanca  


theta_inicial = 0  
resultado_theta = minimize(log_verossimilhanca_theta, theta_inicial, args=(b_estimado, acertos[0]), method='Nelder-Mead')
theta_estimado = resultado_theta.x[0]

print(f"\nHabilidade estimada do candidato (theta): {theta_estimado:.4f}")
