import psycopg2
import pandas as pd
import math as m
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

#Profundidade -> m
#Medidas -> micrômetros (µm)

connection = psycopg2.connect(database="TEST",
                             user="puser",
                              password="pass",
                              host="localhost",
                              port='number_port')
cursor = connection.cursor()

con1 = connection.cursor()
con1.execute("""
    SELECT * FROM DADOS;
""")

query1 = con1.fetchall()
con1.close()
d1 = []
for i in query1:
    id = int(i[0])
    diametro = float(i[1])
    d1.append([id,diametro])

dados = pd.DataFrame(d1, columns=['ID', 'DIAMETRO'])
# quantidade de intervalos

I = m.ceil(m.log2(len(dados)) + 2)

min_value = dados['DIAMETRO'].min()
max_value = dados['DIAMETRO'].max()

class_amp = ((max_value - min_value) / I)

tabela_freq = pd.DataFrame(columns=['ID', 'classes', 'freq_simples', 'freq_perct', 'freq_ac', 'freq_acp'])
dados_histgram = []
total = dados1['diametro'].count()
fa = 0
fap = 0
for i in range(I):
    lower = min_value + i * class_amp
    upper = lower + class_amp
    freq_data = dados1[(dados1['diametro'] >= lower) & (dados1['diametro'] < upper)]
    freq_count = freq_data['diametro'].count()
    fp = freq_count / total 
    fa += freq_count
    fap = fa/total
    tabela_freq.loc[i] = [i + 1, f'[{lower:.2f}, {upper:.2f})', freq_count, fp, fa, fap]
    dados_histgram.extend([lower + (upper - lower) / 2] * freq_count)

sns.histplot(dados_histgram, bins=len(tabela_freq), palette='viridis', edgecolor='red')
plt.xlabel('Classes')
plt.ylabel('Histograma')
plt.title('Histograma com diâmetro dos microfósseis coloniais')
for p in plt.gca().patches:
    height = p.get_height()
    plt.text(p.get_x() + p.get_width() / 2., height + 0.1,
             f'{int(height)}', ha="center", fontsize=10)
#plt.show()

dados_mediana = dados['DIAMETRO'].sort_values( ascending=True).reset_index(drop=True)
mediana = dados_mediana.median()
media = round(dados_mediana.mean(),4)

media_ceil = m.ceil(media)
media_floor = m.floor(media)
varianca = round(np.var(dados_mediana),4)
std = round(np.std(dados_mediana), 4)
coef_variacao = round( np.std(dados_mediana) / np.mean(dados_mediana)*100,4)
print(f"Mediana: {mediana}")
print(f"Média: {media}")
print(f"Média arredondada para cima: {media_ceil}")
print(f"Média arredondada para baixo: {media_floor}")
print(f"Variância: {varianca}")
print(f"Desvio Padrao: {std}")
print(f"Coefieciente de variacao: {coef_variacao}")


# Criando o gráfico de caixa
fig = plt.figure(figsize=(12, 6))
plt.boxplot(dados['DIAMETRO'], notch=True, sym='+')
plt.xticks([1], ['DIAMETRO'])
plt.ylim(dados['DIAMETRO'].min() - 1, dados['DIAMETRO'].max() + 1)
plt.grid(True, color='gray', linestyle='--', linewidth=0.7)
plt.show()

fig = plt.figure(figsize=(10, 7))
plt.boxplot(dados['DIAMETRO'])
#plt.show()
